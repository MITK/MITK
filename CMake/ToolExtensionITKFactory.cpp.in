/**
 * This defines an itk::ObjectFactory subclass specific for
 * creation of mitk::Tool instances (in this case mitk::PlainExternalTool).
 */

#include <itkObjectFactoryBase.h>
#include <itkConfigure.h>

#include "mitk@TOOL_NAME@.h"

namespace mitk {

/* class @EXPORT_MACRO@ @FACTORY_NAME@ : public ::itk::ObjectFactoryBase */
class @FACTORY_NAME@ : public ::itk::ObjectFactoryBase
{
  public:

    /* ITK typedefs */
    typedef @FACTORY_NAME@  Self;
    typedef itk::ObjectFactoryBase  Superclass;
    typedef itk::SmartPointer<Self>  Pointer;
    typedef itk::SmartPointer<const Self>  ConstPointer;

    /* Methods from ObjectFactoryBase */
    virtual const char* GetITKSourceVersion() const
    {
      return ITK_VERSION_STRING;
    }\

    virtual const char* GetDescription() const
    {
      return "@FACTORY_DESCRIPTION@";
    }\

    /* Method for class instantiation. */
    itkFactorylessNewMacro(Self);

    /* Run-time type information (and related methods). */
    itkTypeMacro(@FACTORY_NAME@, itkObjectFactoryBase);

  protected:

    @FACTORY_NAME@()
    {
      itk::ObjectFactoryBase::RegisterOverride("mitkTool",
                              "@TOOL_NAME@",
                              "@FACTORY_DESCRIPTION@",
                              1,
                              itk::CreateObjectFunction<@TOOL_NAME@>::New());
    }

    ~@FACTORY_NAME@()
    {
    }

  private:

    @FACTORY_NAME@(const Self&);    /* purposely not implemented */
    void operator=(const Self&);    /* purposely not implemented */

};

class @FACTORY_NAME@RegistrationMethod
{
  public:

    @FACTORY_NAME@RegistrationMethod()
    {
      m_Factory = @FACTORY_NAME@::New();
      itk::ObjectFactoryBase::RegisterFactory( m_Factory );
    }

    ~@FACTORY_NAME@RegistrationMethod()
    {
      itk::ObjectFactoryBase::UnRegisterFactory( m_Factory );
    }

  private:

    @FACTORY_NAME@::Pointer m_Factory;
};

} // end namespace

static mitk::@FACTORY_NAME@RegistrationMethod somestaticinitializer_@FACTORY_NAME@;
