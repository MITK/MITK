/*
  USCONFIG.h
  this file is generated. Do not change!
*/

#ifndef USCONFIG_H
#define USCONFIG_H

#cmakedefine US_BUILD_SHARED_LIBS
#cmakedefine CppMicroServices_EXPORTS
#cmakedefine US_ENABLE_AUTOLOADING_SUPPORT
#cmakedefine US_ENABLE_THREADING_SUPPORT
#cmakedefine US_ENABLE_RESOURCE_COMPRESSION
#cmakedefine US_USE_CXX11
#cmakedefine US_GCC_RTTI_WORKAROUND_NEEDED

///-------------------------------------------------------------------
// Version information
//-------------------------------------------------------------------

#define CppMicroServices_VERSION_MAJOR @CppMicroServices_VERSION_MAJOR@
#define CppMicroServices_VERSION_MINOR @CppMicroServices_VERSION_MINOR@
#define CppMicroServices_VERSION_PATH @CppMicroServices_VERSION_PATCH@
#define CppMicroServices_VERSION @CppMicroServices_VERSION@
#define CppMicroServices_VERSION_STR "@CppMicroServices_VERSION@"

///-------------------------------------------------------------------
// Macros used by the unit tests
//-------------------------------------------------------------------

#define CppMicroServices_SOURCE_DIR "@CppMicroServices_SOURCE_DIR@"

///-------------------------------------------------------------------
// Macros for import/export declarations
//-------------------------------------------------------------------

#if defined(WIN32)
  #define US_ABI_EXPORT __declspec(dllexport)
  #define US_ABI_IMPORT __declspec(dllimport)
  #define US_ABI_LOCAL
#else
  #define US_ABI_EXPORT __attribute__ ((visibility ("default")))
  #define US_ABI_IMPORT __attribute__ ((visibility ("default")))
  #define US_ABI_LOCAL  __attribute__ ((visibility ("hidden")))
#endif

#ifdef US_BUILD_SHARED_LIBS
  // We are building a shared lib
  #ifdef CppMicroServices_EXPORTS
    #define US_EXPORT US_ABI_EXPORT
  #else
    #define US_EXPORT US_ABI_IMPORT
  #endif
#else
  // We are building a static lib
  // Don't hide RTTI symbols of definitions in the C++ Micro Services
  // headers that are included in DSOs with hidden visibility
  #define US_EXPORT US_ABI_EXPORT
#endif

//-------------------------------------------------------------------
// Namespace customization
//-------------------------------------------------------------------

#define US_NAMESPACE @US_NAMESPACE@

#ifndef US_NAMESPACE /* user namespace */

  # define US_PREPEND_NAMESPACE(name) ::name
  # define US_USE_NAMESPACE
  # define US_BEGIN_NAMESPACE
  # define US_END_NAMESPACE
  # define US_FORWARD_DECLARE_CLASS(name) class name;
  # define US_FORWARD_DECLARE_STRUCT(name) struct name;

#else /* user namespace */

  # define US_PREPEND_NAMESPACE(name) ::US_NAMESPACE::name
  # define US_USE_NAMESPACE using namespace ::US_NAMESPACE;
  # define US_BEGIN_NAMESPACE namespace US_NAMESPACE {
  # define US_END_NAMESPACE }
  # define US_FORWARD_DECLARE_CLASS(name) \
    US_BEGIN_NAMESPACE class name; US_END_NAMESPACE

  # define US_FORWARD_DECLARE_STRUCT(name) \
    US_BEGIN_NAMESPACE struct name; US_END_NAMESPACE

  namespace US_NAMESPACE {}

#endif /* user namespace */

//-------------------------------------------------------------------
// Platform defines
//-------------------------------------------------------------------

#if defined(__APPLE__)
  #define US_PLATFORM_APPLE
#endif

#if defined(__linux__)
  #define US_PLATFORM_LINUX
#endif

#if defined(_WIN32) || defined(_WIN64)
  #define US_PLATFORM_WINDOWS
#else
  #define US_PLATFORM_POSIX
#endif

//-------------------------------------------------------------------
// Macros for suppressing warnings
//-------------------------------------------------------------------

#ifdef _MSC_VER
#define US_MSVC_PUSH_DISABLE_WARNING(wn) \
__pragma(warning(push))                  \
__pragma(warning(disable:wn))
#define US_MSVC_POP_WARNING \
__pragma(warning(pop))
#define US_MSVC_DISABLE_WARNING(wn) \
__pragma(warning(disable:wn))
#else
#define US_MSVC_PUSH_DISABLE_WARNING(wn)
#define US_MSVC_POP_WARNING
#define US_MSVC_DISABLE_WARNING(wn)
#endif

// Do not warn about the usage of deprecated unsafe functions
US_MSVC_DISABLE_WARNING(4996)

//-------------------------------------------------------------------
// Debuging & Logging
//-------------------------------------------------------------------

#cmakedefine US_ENABLE_DEBUG_OUTPUT

US_BEGIN_NAMESPACE
  enum MsgType { DebugMsg = 0, InfoMsg = 1, WarningMsg = 2, ErrorMsg = 3 };
  typedef void (*MsgHandler)(MsgType, const char *);
  US_EXPORT MsgHandler installMsgHandler(MsgHandler);
US_END_NAMESPACE

//-------------------------------------------------------------------
// Hash Container
//-------------------------------------------------------------------

#ifdef US_USE_CXX11

  #include <unordered_map>
  #include <unordered_set>

  #define US_HASH_FUNCTION_BEGIN(type) \
  template<> \
  struct hash<type> : std::unary_function<type, std::size_t> { \
  std::size_t operator()(const type& arg) const {

  #define US_HASH_FUNCTION_END } };

  #define US_HASH_FUNCTION(type, arg) hash<type>()(arg)

  #if defined(US_PLATFORM_WINDOWS) && (_MSC_VER < 1700)
    #define US_HASH_FUNCTION_FRIEND(type) friend class ::std::hash<type>
  #else
    #define US_HASH_FUNCTION_FRIEND(type) friend struct ::std::hash<type>
  #endif

  #define US_UNORDERED_MAP_TYPE ::std::unordered_map
  #define US_UNORDERED_SET_TYPE ::std::unordered_set

  #define US_HASH_FUNCTION_NAMESPACE ::std
  #define US_HASH_FUNCTION_NAMESPACE_BEGIN namespace std {
  #define US_HASH_FUNCTION_NAMESPACE_END }

#elif defined(__GNUC__)

  #include <tr1/unordered_map>
  #include <tr1/unordered_set>

  #define US_HASH_FUNCTION_BEGIN(type) \
  template<> \
  struct hash<type> : std::unary_function<type, std::size_t> { \
  std::size_t operator()(const type& arg) const {

  #define US_HASH_FUNCTION_END } };

  #define US_HASH_FUNCTION(type, arg) hash<type>()(arg)
  #define US_HASH_FUNCTION_FRIEND(type) friend struct ::std::tr1::hash<type>

  #define US_UNORDERED_MAP_TYPE ::std::tr1::unordered_map
  #define US_UNORDERED_SET_TYPE ::std::tr1::unordered_set

  #define US_HASH_FUNCTION_NAMESPACE ::std::tr1
  #define US_HASH_FUNCTION_NAMESPACE_BEGIN namespace std { namespace tr1 {
  #define US_HASH_FUNCTION_NAMESPACE_END }}

#elif _MSC_VER <= 1500 // Visual Studio 2008 and lower

  #include <hash_map>
  #include <hash_set>

  #define US_HASH_FUNCTION_BEGIN(type) \
  template<> \
  inline std::size_t hash_value<type>(const type& arg) {

  #define US_HASH_FUNCTION_END }

  #define US_HASH_FUNCTION(type, arg) hash_value(arg)
  #define US_HASH_FUNCTION_FRIEND(type) friend std::size_t stdext::hash_value<type>(const type&)

  #define US_UNORDERED_MAP_TYPE ::stdext::hash_map
  #define US_UNORDERED_SET_TYPE ::stdext::hash_set

  #define US_HASH_FUNCTION_NAMESPACE ::stdext
  #define US_HASH_FUNCTION_NAMESPACE_BEGIN namespace stdext {
  #define US_HASH_FUNCTION_NAMESPACE_END }

#endif


//-------------------------------------------------------------------
// Threading Configuration
//-------------------------------------------------------------------

#ifdef US_ENABLE_THREADING_SUPPORT
  #define US_DEFAULT_THREADING US_PREPEND_NAMESPACE(MultiThreaded)
#else
  #define US_DEFAULT_THREADING US_PREPEND_NAMESPACE(SingleThreaded)
#endif

//-------------------------------------------------------------------
// Header Availability
//-------------------------------------------------------------------

#cmakedefine HAVE_STDINT

#endif // USCONFIG_H
