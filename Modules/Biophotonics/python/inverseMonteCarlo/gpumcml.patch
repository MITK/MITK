--- /home/wirkert/workspace/monteCarlo/gpumcml_unpatched/fast-gpumcml/gpumcml_io.c	2010-06-11 12:45:12.000000000 +0200
+++ /home/wirkert/workspace/monteCarlo/gpumcml/fast-gpumcml/gpumcml_io.c	2015-02-02 14:10:09.421555000 +0100
@@ -204,39 +204,6 @@
   fprintf(pFile_outp,"%G \t\t #Transmittance [-]\n",(double)T/scale1);


-  // Calculate and write A_l
-  fprintf(pFile_outp,"\nA_l #Absorption as a function of layer. [-]\n");
-  z=0;
-  for(l=1;l<=sim->n_layers;l++)
-  {
-    temp=0;
-    while(((double)z+0.5)*dz<=sim->layers[l].z_max)
-    {
-#if 0
-      for(r=0;r<nr;r++) temp+=HostMem->A_rz[z*nr+r];
-#else
-      for (r = 0; r < nr; ++r) temp += HostMem->A_rz[r*nz + z];
-#endif
-      z++;
-      if(z==nz)break;
-    }
-    fprintf(pFile_outp,"%G\n",(double)temp/scale1);
-  }
-
-  // Calculate and write A_z
-  scale2=scale1*dz;
-  fprintf(pFile_outp,"\nA_z #A[0], [1],..A[nz-1]. [1/cm]\n");
-  for(z=0;z<nz;z++)
-  {
-    temp=0;
-#if 0
-    for(r=0;r<nr;r++) temp+=HostMem->A_rz[z*nr+r];
-#else
-    for (r = 0; r < nr; ++r) temp += HostMem->A_rz[r*nz + z];
-#endif
-    fprintf(pFile_outp,"%E\n",(double)temp/scale2);
-  }
-
   // Calculate and write Rd_r
   fprintf(pFile_outp,"\nRd_r #Rd[0], [1],..Rd[nr-1]. [1/cm2]\n");
   for(r=0;r<nr;r++)
@@ -247,79 +214,6 @@
     fprintf(pFile_outp,"%E\n",(double)temp/scale2);
   }

-  // Calculate and write Rd_a
-  fprintf(pFile_outp,"\nRd_a #Rd[0], [1],..Rd[na-1]. [sr-1]\n");
-  for(a=0;a<na;a++)
-  {
-    temp=0;
-    for(r=0;r<nr;r++) temp+=HostMem->Rd_ra[a*nr+r];
-    scale2=scale1*4*PI_const*sin((a+0.5)*da)*sin(da/2);
-    fprintf(pFile_outp,"%E\n",(double)temp/scale2);
-  }
-
-  // Calculate and write Tt_r
-  fprintf(pFile_outp,"\nTt_r #Tt[0], [1],..Tt[nr-1]. [1/cm2]\n");
-  for(r=0;r<nr;r++)
-  {
-    temp=0;
-    for(a=0;a<na;a++) temp+=HostMem->Tt_ra[a*nr+r];
-    scale2=scale1*2*PI_const*(r+0.5)*dr*dr;
-    fprintf(pFile_outp,"%E\n",(double)temp/scale2);
-  }
-
-  // Calculate and write Tt_a
-  fprintf(pFile_outp,"\nTt_a #Tt[0], [1],..Tt[na-1]. [sr-1]\n");
-  for(a=0;a<na;a++)
-  {
-    temp=0;
-    for(r=0;r<nr;r++) temp+=HostMem->Tt_ra[a*nr+r];
-    scale2=scale1*4*PI_const*sin((a+0.5)*da)*sin(da/2);
-    fprintf(pFile_outp,"%E\n",(double)temp/scale2);
-  }
-
-
-  // Scale and write A_rz
-  i=0;
-  fprintf(pFile_outp,"\n# A[r][z]. [1/cm3]\n# A[0][0], [0][1],..[0][nz-1]\n# A[1][0], [1][1],..[1][nz-1]\n# ...\n# A[nr-1][0], [nr-1][1],..[nr-1][nz-1]\nA_rz\n");
-  for(r=0;r<nr;r++)
-  {
-    for(z=0;z<nz;z++)
-    {
-      scale2=scale1*2*PI_const*(r+0.5)*dr*dr*dz;
-#if 0
-      fprintf(pFile_outp," %E ",(double)HostMem->A_rz[z*nr+r]/scale2);
-#else
-      fprintf(pFile_outp, " %E ", (double)HostMem->A_rz[r*nz + z] / scale2);
-#endif
-      if((i++)==4){i=0;fprintf(pFile_outp,"\n");}
-    }
-  }
-
-  // Scale and write Rd_ra
-  i=0;
-  fprintf(pFile_outp,"\n\n# Rd[r][angle]. [1/(cm2sr)].\n# Rd[0][0], [0][1],..[0][na-1]\n# Rd[1][0], [1][1],..[1][na-1]\n# ...\n# Rd[nr-1][0], [nr-1][1],..[nr-1][na-1]\nRd_ra\n");
-  for(r=0;r<nr;r++)
-  {
-    for(a=0;a<na;a++)
-    {
-      scale2=scale1*2*PI_const*(r+0.5)*dr*dr*cos((a+0.5)*da)*4*PI_const*sin((a+0.5)*da)*sin(da/2);
-      fprintf(pFile_outp," %E ",(double)HostMem->Rd_ra[a*nr+r]/scale2);
-      if((i++)==4){i=0;fprintf(pFile_outp,"\n");}
-    }
-  }
-
-  // Scale and write Tt_ra
-  i=0;
-  fprintf(pFile_outp,"\n\n# Tt[r][angle]. [1/(cm2sr)].\n# Tt[0][0], [0][1],..[0][na-1]\n# Tt[1][0], [1][1],..[1][na-1]\n# ...\n# Tt[nr-1][0], [nr-1][1],..[nr-1][na-1]\nTt_ra\n");
-  for(r=0;r<nr;r++)
-  {
-    for(a=0;a<na;a++)
-    {
-      scale2=scale1*2*PI_const*(r+0.5)*dr*dr*cos((a+0.5)*da)*4*PI_const*sin((a+0.5)*da)*sin(da/2);
-      fprintf(pFile_outp," %E ",(double)HostMem->Tt_ra[a*nr+r]/scale2);
-      if((i++)==4){i=0;fprintf(pFile_outp,"\n");}
-    }
-  }

   fclose(pFile_outp);
   return 0;
