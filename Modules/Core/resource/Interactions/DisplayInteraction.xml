<!--
State machine pattern for display interactions:
-Zooming
-Panning
-Scrolling through planes
-Adjusting the LevelWindow

For some interactions several transitions exists, which one is used can be determined by the configuration file.
If an event_variant is not declared in the configuration file it is disabled.

For example scrolling can be triggered by Key-, Wheel- or MouseMove events, where the latter needs an extra state for scrolling.
So they are triggered by different event_variants, to choose which one is used, describe the desired event_variant in a config file
and omit the others. See DisplayConfig___ for examples and also for parameters for the interaction behaviour.


TODO Std move to abort interaction of scroll/pan/zoom
-->
<statemachine>
    <state name="start" startstate="true" >
        <transition event_class="InteractionPositionEvent" event_variant="StartMove" target="move">
          <condition name="check_position_event"/>
          <action name="init"/>
        </transition>
        <transition event_class="InteractionPositionEvent" event_variant="StartZoom" target="zoom">
          <condition name="check_position_event"/>
          <action name="init"/>
        </transition>
        <!-- mitkDispplayInteractor.cpp implements this for all events -->
        <transition event_class="InteractionEvent" event_variant="PlaneUP" target="start">
            <action name="ScrollOneUp"/>
        </transition>
        <transition event_class="InteractionEvent" event_variant="PlaneDown" target="start">
            <action name="ScrollOneDown"/>
        </transition>
        <transition event_class="MousePressEvent"  event_variant="StartScroll" target="scroll">
            <action name="init"/>
        </transition>
        <transition event_class="MousePressEvent"  event_variant="StartAdjustLevelWindow" target="adjustlevelwindow">
            <action name="init"/>
        </transition>
        <transition event_class="InteractionKeyEvent" event_variant="StdArrowRight" target="start" >
          <action name="rotate" />
        </transition>
        <transition event_class="InteractionKeyEvent" event_variant="StdArrowLeft" target="start" >
          <action name="rotateBack" />
        </transition>
        <transition event_class="InteractionKeyEvent" event_variant="StdArrowUp" target="start" >
          <action name="rotateUp" />
        </transition>
        <transition event_class="InteractionKeyEvent" event_variant="StdArrowDown" target="start" >
          <action name="rotateDown" />
        </transition>
        <transition event_class="InteractionPositionEvent"  event_variant="SetCrosshair" target="crosshair">
            <action name="setCrosshair"/>
            <action name="updateStatusbar"/>
        </transition>
        <transition event_class="InteractionPositionEvent"  event_variant="Move" target="rotationPossible">
            <condition name="check_can_rotate"/>
            <action name="startRotation"/>
        </transition>
        <!-- Case when we do crosshair instead of rotation) -->
        <transition event_class="InteractionPositionEvent"  event_variant="StartRotate" target="crosshair">
            <condition name="check_can_rotate" inverted="true" />
        </transition>

        <transition event_class="InteractionPositionEvent"  event_variant="StartSwivel" target="swivel">
            <condition name="check_can_swivel"/>
        </transition>
        <!-- Case when we do crosshair instead of swivel) -->
        <transition event_class="InteractionPositionEvent"  event_variant="StartSwivel" target="crosshair">
            <condition name="check_can_swivel" inverted="true"/>
        </transition>
    </state>
    <state name="crosshair">
      <transition event_class="InteractionPositionEvent"  event_variant="MoveCrosshair" target="crosshair">
        <action name="setCrosshair"/>
        <action name="updateStatusbar"/>
      </transition>
      <transition event_class="InteractionPositionEvent" event_variant="EndMoveCrosshair" target="start"/>

      <!-- Case when we jumped in from rotation (wanted to rotate, but not possible, so alternative action is to set crosshair) -->
      <transition event_class="InteractionPositionEvent"  event_variant="Rotate" target="crosshair">
        <action name="setCrosshair"/>
      </transition>
      <transition event_class="InteractionPositionEvent" event_variant="EndRotate" target="start"/>
      <!-- Case when we do crosshair instead of swivel) -->
      <transition event_class="InteractionPositionEvent"  event_variant="Swivel" target="crosshair">
        <action name="setCrosshair"/>
        <action name="updateStatusbar"/>
      </transition>
      <transition event_class="InteractionPositionEvent" event_variant="EndSwivel" target="start"/>
    </state>
    <state name="move">
      <transition event_class="InteractionPositionEvent" event_variant="Moving" target="move">
        <condition name="check_position_event"/>
        <action name="move"/>
      </transition>
      <transition event_class="InteractionPositionEvent" event_variant="EndMoving" target="start"/>
    </state>
    <state name="zoom">
      <transition event_class="InteractionPositionEvent" event_variant="Zooming" target="zoom">
        <condition name="check_position_event"/>
        <action name="zoom"/>
      </transition>
      <transition event_class="InteractionPositionEvent" event_variant="EndZooming" target="start"/>
    </state>
    <state name="scroll">
      <transition event_class="InteractionPositionEvent" event_variant="Scrolling" target="scroll">
        <condition name="check_position_event"/>
        <action name="scroll"/>
      </transition>
      <transition event_class="InteractionPositionEvent" event_variant="EndScrolling" target="start"/>
      <transition event_class="InteractionPositionEvent" event_variant="EndScrollingVar" target="start"/>
    </state>
    <state name="adjustlevelwindow">
      <transition event_class="InteractionPositionEvent" event_variant="adjustlevelwindow" target="adjustlevelwindow">
        <condition name="check_position_event"/>
        <action name="levelWindow"/>
      </transition>
      <transition event_class="InteractionPositionEvent" event_variant="EndLevelWindow" target="start"/>
    </state>
    <state name="rotationPossible">
      <transition event_class="InteractionPositionEvent" event_variant="StartRotate" target="rotation">
        <action name="rotate"/>
      </transition>
      <transition event_class="InteractionPositionEvent" event_variant="Move" target="start">
        <condition name="check_can_rotate" inverted="true" />
        <action name="endRotation"/>
      </transition>
      <transition event_class="InteractionEvent" event_variant="PlaneUP" target="rotationPossible">
        <action name="ScrollOneUp"/>
      </transition>
      <transition event_class="InteractionEvent" event_variant="PlaneDown" target="rotationPossible">
        <action name="ScrollOneDown"/>
      </transition>
      <transition event_class="InteractionPositionEvent" event_variant="StartMove" target="move">
        <condition name="check_position_event"/>
        <action name="init"/>
      </transition>
      <transition event_class="InteractionPositionEvent" event_variant="StartZoom" target="zoom">
        <condition name="check_position_event"/>
        <action name="init"/>
      </transition>
    </state>
    <state name="rotation">
      <transition event_class="InteractionPositionEvent" event_variant="Rotate" target="rotation">
        <action name="rotate"/>
      </transition>
      <transition event_class="InteractionPositionEvent" event_variant="EndRotate" target="start">
        <action name="endRotation"/>
      </transition>
    </state>
    <state name="swivel">
      <transition event_class="InteractionPositionEvent" event_variant="Swivel" target="swivel">
        <action name="swivel"/>
      </transition>
      <transition event_class="InteractionPositionEvent" event_variant="EndSwivel" target="start"/>
    </state>

</statemachine>
