/**
\page org_mitk_gui_qt_simulation The Simulation Plugin

\image html org_mitk_gui_qt_simulation.png "Icon of the Simulation Plugin."

\tableofcontents

\section org_mitk_gui_qt_simulationOverview Overview

The Simulation View allows you to run SOFA simulations.
Its layout is very similar to the <tt>runSofa</tt> application and if you used SOFA before, you should immediately feel comfortable.
Currently you can animate your simulation, step through with arbitrary time steps, and reset your simulation scene.
Rendering options, e.g. rendering force fields or visual mappings, are represented by properties of a simulation data node.
SOFA plugins can be loaded via the simulation preferences.

You can easily take snapshots of your simulation scene, which are represented by 3D surfaces, or record your simulation scene as 3D+t surface.
An advantage over <tt>runSofa</tt> is the ability to load multiple simulation scenes in parallel.
There is also support for a kind of predefined editing of simulation scene files by writing simulation scene templates, which can be adjusted in the Properties View.

\section org_mitk_gui_qt_simulationUsage Usage

Simulation scenes are easily recognizable in the Data Manager by their SOFA icon.

\image html DataManager_SimulationNodes.png "Data Manager with three simulation scenes."

Selection of simulation scenes in the Data Manager does not affect the active simulation, which must be explicitly selected in the Simulation View.
However, rendering properties, which can be seen in the Properties View, refer to the selected simulation scene in the Data Manager.

\image html Properties_Simulation.png "Properties of a simulation scene."

The appearance of the Simulation View changes slightly depending on which operations are currently possible or make sense, i.e. when no simulation scene was loaded, most of the Simulation View controls are disabled.

\image html SimulationView_Inactive_Active.png "The Simulation View enables its controls depending on which of them can be executed at the moment."

You can take snapshots of the active simulation scene by pressing the <tt>Take Snapshot</tt> button.
You can toggle the <tt>Record</tt> button at any time to record all following simulation steps until you toggle it again.
The number of recorded steps is shown during recording.

\image html SimulationView_Recording.png "Recording simulation steps."

Snapshots and records are appended to the corresponding simulation scene in the Data Manager.
Snapshots are represented by 3D surfaces and recordings with more than a single frame as 3D+t surfaces.
You can step through a 3D+t surface by using the <tt>Time</tt> slider of the Image Navigator View.

\image html DataManager_Snapshots_Record.png "The caduceus simulation scene has two snapshots and a record."

\section org_mitk_gui_qt_simulationAdvancedUsage Advanced Usage

\subsection org_mitk_gui_qt_simulationSOFAPlugins SOFA Plugins

SOFA plugins are supported by MITK and can be loaded during runtime. For more information, see \ref SimulationManualSOFAPluginBuildInstructions.

\subsection org_mitk_gui_qt_simulationSimulationTemplates Simulation Templates

Simulation templates are extended SOFA scene files and have the file extension <tt>.scn.template</tt>.
They contain special strings which are parsed and displayed as properties in the Properties View.
You can create a simulation scene from a simulation template via its context menu in the Data Manager.
Behind the scenes all templates of a simulation template file are replaced by concrete values.
This simulation scene is saved in the same directory as the simulation template and automatically loaded.

\image html DataManager_CreateSimulation.png "A simulation can be created from a simulation template via its context menu in the Data Manager."

<br>

\image html Properties_SimulationTemplate.png "A simulation template typically has several properties which can be adjusted before creating a simulation."

The syntax for templates is as follows:

\code
{id='Collision.Alarm Distance' type='int' default='5'}
\endcode

<tt>id</tt> must be unique and is parsed as property name, i.e. use periods to arrange properties in tree order.
<tt>type</tt> is optional and its default is <tt>string</tt>.
Other valid types are <tt>int</tt> and <tt>float</tt>.
<tt>default</tt> is also optional and specifies the default value of the property.

Since IDs must be unique but some values are supposed to appear in multiple places in a simulation template, you can specify references to templates as follows:

\code
{'Collision.Alarm Distance'}
\endcode

\warning
Braces are only allowed to open or close templates and references.
References must begin with <tt>{'</tt> and end with <tt>'}'</tt>.
You must escape single quotation marks C-style, e.g. <tt>{id='Flinders\'s Cat' default='Trim'}</tt>.

A good practice is to list all templates within XML comments at the beginning of the simulation template file and to just reference them as needed.

\code
<?xml version="1.0"?>

<!-- {id='Simulation.Time Step' type='float' default='0.1'} -->
<!-- {id='Collision.Alarm Distance' type='float' default='5'} -->
<!-- {id='Collision.Contact Distance' type='float' default='3'} -->

<Node dt="{'Simulation.Time Step'}">
  <MinProximityIntersection alarmDistance="{'Collision.Alarm Distance'}" contactDistance="{'Collision.Contact Distance'}" />

<!-- ... -->
\endcode
*/
