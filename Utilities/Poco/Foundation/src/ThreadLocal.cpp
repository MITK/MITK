//
// ThreadLocal.cpp
//
// $Id$
//
// Library: Foundation
// Package: Threading
// Module:  Thread
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/ThreadLocal.h"
#include "Poco/SingletonHolder.h"
#include "Poco/Thread.h"


namespace Poco {


TLSAbstractSlot::TLSAbstractSlot()
{
}


TLSAbstractSlot::~TLSAbstractSlot()
{
}


ThreadLocalStorage::ThreadLocalStorage()
{
}


ThreadLocalStorage::~ThreadLocalStorage()
{
  for (TLSMap::iterator it = _map.begin(); it != _map.end(); ++it)
  {
    delete it->second;	
  }
}


TLSAbstractSlot*& ThreadLocalStorage::get(const void* key)
{

  TLSMap::iterator it = _map.find(key);
  if (it == _map.end())
  {
    #if (_MSC_VER > 1500)
      return _map.insert(TLSMap::value_type(key, nullptr)).first->second;
    #else
      return _map.insert(TLSMap::value_type(key, 0)).first->second;
    #endif
  }
    
  else
    return it->second;
}


ThreadLocalStorage& ThreadLocalStorage::current()
{
  Thread* pThread = Thread::current();
  if (pThread)
  {
    return pThread->tls();
  }
  else
  {
    static SingletonHolder<ThreadLocalStorage> sh;
    return *sh.get();
  }
}


void ThreadLocalStorage::clear()
{
  Thread* pThread = Thread::current();
  if (pThread)
    pThread->clearTLS();
}


} // namespace Poco
