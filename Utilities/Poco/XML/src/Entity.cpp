//
// Entity.cpp
//
// $Id$
//
// Library: XML
// Package: DOM
// Module:  DOM
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/DOM/Entity.h"


namespace Poco {
namespace XML {


const XMLString Entity::NODE_NAME = toXMLString("#entity");


Entity::Entity(Document* pOwnerDocument, const XMLString& name, const XMLString& publicId, const XMLString& systemId, const XMLString& notationName): 
	AbstractContainerNode(pOwnerDocument),
	_name(name),
	_publicId(publicId),
	_systemId(systemId),
	_notationName(notationName)
{
}


Entity::Entity(Document* pOwnerDocument, const Entity& entity): 
	AbstractContainerNode(pOwnerDocument, entity),
	_name(entity._name),
	_publicId(entity._publicId),
	_systemId(entity._systemId),
	_notationName(entity._notationName)
{
}


Entity::~Entity()
{
}


const XMLString& Entity::nodeName() const
{
	return _name;
}


unsigned short Entity::nodeType() const
{
	return Node::ENTITY_NODE;
}


Node* Entity::copyNode(bool deep, Document* pOwnerDocument) const
{
	return new Entity(pOwnerDocument, *this);
}


} } // namespace Poco::XML
